[{"C:\\vxxiv\\task-3\\src\\index.js":"1","C:\\vxxiv\\task-3\\src\\App.js":"2","C:\\vxxiv\\task-3\\src\\components\\Menu.jsx":"3","C:\\vxxiv\\task-3\\src\\components\\Home.jsx":"4","C:\\vxxiv\\task-3\\src\\components\\Data.jsx":"5","C:\\vxxiv\\task-3\\src\\components\\Design.jsx":"6","C:\\vxxiv\\task-3\\src\\components\\Logs.jsx":"7","C:\\vxxiv\\task-3\\src\\components\\WorkFlow.jsx":"8","C:\\vxxiv\\task-3\\src\\components\\Settings.jsx":"9","C:\\vxxiv\\task-3\\src\\components\\Gpt.jsx":"10","C:\\vxxiv\\task-3\\src\\components\\Modal.jsx":"11","C:\\vxxiv\\task-3\\src\\components\\Bottombar.jsx":"12","C:\\vxxiv\\task-3\\src\\graphs\\collapsableTree.js":"13","C:\\vxxiv\\task-3\\src\\graphs\\versorDragging.js":"14"},{"size":310,"mtime":1690555518930,"results":"15","hashOfConfig":"16"},{"size":1098,"mtime":1690994352379,"results":"17","hashOfConfig":"16"},{"size":5259,"mtime":1690997653250,"results":"18","hashOfConfig":"16"},{"size":290,"mtime":1691066299238,"results":"19","hashOfConfig":"16"},{"size":2299,"mtime":1691046995256,"results":"20","hashOfConfig":"16"},{"size":490,"mtime":1690997322559,"results":"21","hashOfConfig":"16"},{"size":328,"mtime":1690997376788,"results":"22","hashOfConfig":"16"},{"size":460,"mtime":1690997413040,"results":"23","hashOfConfig":"16"},{"size":456,"mtime":1690997416625,"results":"24","hashOfConfig":"16"},{"size":303,"mtime":1690997329285,"results":"25","hashOfConfig":"16"},{"size":553,"mtime":1691049716331,"results":"26","hashOfConfig":"16"},{"size":3929,"mtime":1690861748698,"results":"27","hashOfConfig":"16"},{"size":4788,"mtime":1691149789544,"results":"28","hashOfConfig":"16"},{"size":3586,"mtime":1691050026180,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"yplhtm",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"34"},"C:\\vxxiv\\task-3\\src\\index.js",["75","76"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport Menu from './components/Menu';\nimport Home from './components/Home';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n",[],"C:\\vxxiv\\task-3\\src\\App.js",[],[],"C:\\vxxiv\\task-3\\src\\components\\Menu.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Home.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Data.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Design.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Logs.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\WorkFlow.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Settings.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Gpt.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Modal.jsx",[],[],"C:\\vxxiv\\task-3\\src\\components\\Bottombar.jsx",[],[],"C:\\vxxiv\\task-3\\src\\graphs\\collapsableTree.js",[],[],"C:\\vxxiv\\task-3\\src\\graphs\\versorDragging.js",["77"],[],"import React, { useEffect, useRef } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { geoPath, geoNaturalEarth1, geoRotation } from \"d3-geo\";\r\nimport { select, pointers } from \"d3-selection\";\r\nimport { drag } from \"d3-drag\";\r\n// import { geoRotationIdentity } from \"d3-geo-projection\";\r\nimport { feature } from \"topojson-client\";\r\nimport land50mData from \"./land50m.json\";\r\nimport land110mData from \"./land110m.json\";\r\nimport * as d3 from 'd3';\r\n\r\nfunction geoRotationIdentity(rotate) {\r\n    rotate[0] %= 360;\r\n    rotate[1] %= 360;\r\n    rotate[2] %= 360;\r\n    return rotate.length === 3 ? rotate : [rotate[0] || 0, rotate[1] || 0, rotate[2] || 0];\r\n  }\r\n\r\nconst Globe = () => {\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const map = L.map(mapRef.current).setView([0, 0], 2);\r\n    L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\").addTo(map);\r\n\r\n    const width = 800;\r\n    const height = 600;\r\n    const projection = geoNaturalEarth1().rotate([0, 0]).fitSize([width, height], { type: \"Sphere\" });\r\n\r\n    const context = select(map.getPane(\"overlayPane\")).append(\"canvas\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height)\r\n      .node().getContext(\"2d\");\r\n\r\n    const path = geoPath(projection, context);\r\n\r\n    const land50m = feature(land50mData, land50mData.objects.land);\r\n    const land110m = feature(land110mData, land110mData.objects.land);\r\n\r\n    function render(land) {\r\n      context.clearRect(0, 0, width, height);\r\n      context.beginPath(); path({type: \"Sphere\"}); context.fillStyle = \"#fff\"; context.fill();\r\n      context.beginPath(); path(land); context.fillStyle = \"#000\"; context.fill();\r\n      context.beginPath(); path({type: \"Sphere\"}); context.stroke();\r\n    }\r\n\r\n    function pointer(event) {\r\n        const t = event.touches;\r\n        if (t && t.length !== l) {\r\n          l = t.length;\r\n          if (l > 1) a0 = Math.atan2(t[1].clientY - t[0].clientY, t[1].clientX - t[0].clientX);\r\n          dragstarted.apply(this, [event]);\r\n        }\r\n      \r\n        if (l > 1) {\r\n          const x = d3.mean(t, p => p.clientX);\r\n          const y = d3.mean(t, p => p.clientY);\r\n          const a = Math.atan2(t[1].clientY - t[0].clientY, t[1].clientX - t[0].clientX);\r\n          return [x, y, a];\r\n        }\r\n      \r\n        return [t[0].clientX, t[0].clientY];\r\n      }\r\n\r\n      function dragstarted(event) {\r\n        const t = event.touches || [event];\r\n        v0 = projection.invert([t[0].clientX, t[0].clientY]);\r\n        q0 = geoRotation(projection.rotate());\r\n      }\r\n\r\n      function dragged(event) {\r\n        const t = event.touches || [event];\r\n        const v1 = projection.invert([t[0].clientX, t[0].clientY]);\r\n        const delta = [v1[0] - v0[0], v1[1] - v0[1]];\r\n        let q1 = q0;\r\n      \r\n        if (l > 1) {\r\n          const p = pointer(event);\r\n          if (p[2]) {\r\n            const d = (p[2] - a0) / 2;\r\n            const s = -Math.sin(d);\r\n            const c = Math.sign(Math.cos(d));\r\n            q1 = geoRotationIdentity([-s * 180 / Math.PI, 0, c * 180 / Math.PI]);\r\n          }\r\n        }\r\n      \r\n        projection.rotate(geoRotation(q1).invert(delta));\r\n      \r\n        if (delta[0] < 0.7) dragstarted(event);\r\n        render(land110m);\r\n      }\r\n\r\n    let v0, q0, a0, l = 0;\r\n    select(context.canvas).call(drag().on(\"start\", dragstarted).on(\"drag\", dragged));\r\n    render(land50m);\r\n\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mapRef} style={{ width: \"800px\", height: \"600px\" }} />;\r\n};\r\n\r\nexport default Globe;\r\n",{"ruleId":"78","severity":1,"message":"79","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":12},{"ruleId":"78","severity":1,"message":"82","line":5,"column":8,"nodeType":"80","messageId":"81","endLine":5,"endColumn":12},{"ruleId":"78","severity":1,"message":"83","line":5,"column":18,"nodeType":"80","messageId":"81","endLine":5,"endColumn":26},"no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'Home' is defined but never used.","'pointers' is defined but never used."]
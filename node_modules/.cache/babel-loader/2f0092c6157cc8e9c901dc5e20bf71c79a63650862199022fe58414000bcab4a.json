{"ast":null,"code":"var _jsxFileName = \"C:\\\\vxxiv\\\\task-3\\\\src\\\\graphs\\\\collapsableTree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport data from './flare-2.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = () => {\n  _s();\n  // Ref for the SVG container\n  const svgRef = useRef();\n  useEffect(() => {\n    const chart = () => {\n      // Define the dimensions and margins for the chart\n      const width = 928;\n      const height = 600;\n      const margin = {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      };\n\n      // Calculate the actual width and height considering margins\n      const innerWidth = width - margin.left - margin.right;\n      const innerHeight = height - margin.top - margin.bottom;\n\n      // Create a hierarchical tree layout\n      const root = d3.hierarchy(data);\n      const treeLayout = d3.tree().size([innerHeight, innerWidth]).separation((a, b) => a.parent === b.parent ? 1.2 : 2);\n\n      // Perform the layout to calculate the node positions\n      treeLayout(root);\n\n      // Create a new SVG element\n      const svg = d3.create('svg').attr('width', width).attr('height', height);\n\n      // Create a group element to apply margins\n      const g = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Render the links (lines connecting nodes)\n      g.selectAll('path').data(root.links()).enter().append('path').attr('d', d => {\n        return `M${d.source.y},${d.source.x}V${d.target.x}H${d.target.y}`;\n      }).attr('fill', 'none').attr('stroke', 'black');\n\n      // Render the nodes (circles representing data elements)\n      g.selectAll('circle').data(root.descendants()).enter().append('circle').attr('cx', d => d.y).attr('cy', d => d.x).attr('r', 4).attr('fill', 'steelblue');\n\n      // Render the node labels (text displaying node names)\n      g.selectAll('text').data(root.descendants()).enter().append('text').attr('x', d => d.y).attr('y', d => d.x).attr('dx', d => d.children ? -6 : 6).attr('dy', 3).attr('text-anchor', d => d.children ? 'end' : 'start').attr('font-size', '12px').text(d => d.data.name).call(wrapText, 100); // Wrap text after 100 pixels\n\n      return svg.node();\n    };\n\n    // Function to wrap text within the specified width\n    function wrapText(text, width) {\n      text.each(function () {\n        const textNode = d3.select(this);\n        const words = textNode.text().split(/\\s+/).reverse();\n        let word;\n        let line = [];\n        let lineNumber = 0;\n        const lineHeight = 1.1; // ems\n        const y = textNode.attr('y');\n        const dy = parseFloat(textNode.attr('dy') || 0);\n        let tspan = textNode.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');\n        while (word = words.pop()) {\n          line.push(word);\n          tspan.text(line.join(' '));\n          if (tspan.node().getComputedTextLength() > width) {\n            line.pop();\n            tspan.text(line.join(' '));\n            line = [word];\n            tspan = textNode.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);\n          }\n        }\n      });\n    }\n    // const chart = () => {\n    //     const width = 800;\n    //     const height = 600;\n    //     const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n\n    //     const innerWidth = width - margin.left - margin.right;\n    //     const innerHeight = height - margin.top - margin.bottom;\n\n    //     const svg = d3.create('svg').attr('width', width).attr('height', height);\n\n    //     const g = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n    //     // Extract values from the data hierarchy\n    //     const flattenData = (root) => {\n    //       const nodes = [];\n    //       root.each((node) => nodes.push(node));\n    //       return nodes;\n    //     };\n\n    //     const nodes = flattenData(d3.hierarchy(data));\n\n    //     // Create scales to map data attributes to visual attributes\n    //     const xScale = d3.scaleLinear().domain([0, nodes.length]).range([0, innerWidth]);\n    //     const yScale = d3.scaleLinear().domain([0, d3.max(nodes, (d) => d.data.value)]).range([innerHeight, 0]);\n\n    //     // Render the points (scatter plot)\n    //     g.selectAll('circle')\n    //       .data(nodes)\n    //       .enter()\n    //       .append('circle')\n    //       .attr('cx', (d, i) => xScale(i))\n    //       .attr('cy', (d) => yScale(d.data.value))\n    //       .attr('r', 4)\n    //       .attr('fill', 'steelblue');\n\n    //     // Add axis to the chart\n    //     const xAxis = d3.axisBottom(xScale);\n    //     const yAxis = d3.axisLeft(yScale);\n\n    //     g.append('g').attr('transform', `translate(0,${innerHeight})`).call(xAxis);\n    //     g.append('g').call(yAxis);\n\n    //     return svg.node();\n    //   };\n\n    // Append the SVG container to the DOM\n    const svgNode = chart();\n    svgRef.current.appendChild(svgNode);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 10\n  }, this);\n};\n_s(Graph, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","data","jsxDEV","_jsxDEV","Graph","_s","svgRef","chart","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","root","hierarchy","treeLayout","tree","size","separation","a","b","parent","svg","create","attr","g","append","selectAll","links","enter","d","source","y","x","target","descendants","children","text","name","call","wrapText","node","each","textNode","select","words","split","reverse","word","line","lineNumber","lineHeight","dy","parseFloat","tspan","pop","push","join","getComputedTextLength","svgNode","current","appendChild","ref","fileName","_jsxFileName","columnNumber","_c","$RefreshReg$"],"sources":["C:/vxxiv/task-3/src/graphs/collapsableTree.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport data from './flare-2.json';\r\n\r\nconst Graph = () => {\r\n  // Ref for the SVG container\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const chart = () => {\r\n        // Define the dimensions and margins for the chart\r\n        const width = 928;\r\n        const height = 600;\r\n        const margin = {\r\n          top: 10,\r\n          right: 10,\r\n          bottom: 10,\r\n          left: 10,\r\n        };\r\n      \r\n        // Calculate the actual width and height considering margins\r\n        const innerWidth = width - margin.left - margin.right;\r\n        const innerHeight = height - margin.top - margin.bottom;\r\n      \r\n        // Create a hierarchical tree layout\r\n        const root = d3.hierarchy(data);\r\n        const treeLayout = d3.tree().size([innerHeight, innerWidth]).separation((a, b) => (a.parent === b.parent ? 1.2 : 2));\r\n      \r\n        // Perform the layout to calculate the node positions\r\n        treeLayout(root);\r\n      \r\n        // Create a new SVG element\r\n        const svg = d3.create('svg').attr('width', width).attr('height', height);\r\n      \r\n        // Create a group element to apply margins\r\n        const g = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\r\n      \r\n        // Render the links (lines connecting nodes)\r\n        g.selectAll('path')\r\n          .data(root.links())\r\n          .enter()\r\n          .append('path')\r\n          .attr('d', (d) => {\r\n            return `M${d.source.y},${d.source.x}V${d.target.x}H${d.target.y}`;\r\n          })\r\n          .attr('fill', 'none')\r\n          .attr('stroke', 'black');\r\n      \r\n        // Render the nodes (circles representing data elements)\r\n        g.selectAll('circle')\r\n          .data(root.descendants())\r\n          .enter()\r\n          .append('circle')\r\n          .attr('cx', (d) => d.y)\r\n          .attr('cy', (d) => d.x)\r\n          .attr('r', 4)\r\n          .attr('fill', 'steelblue');\r\n      \r\n        // Render the node labels (text displaying node names)\r\n        g.selectAll('text')\r\n          .data(root.descendants())\r\n          .enter()\r\n          .append('text')\r\n          .attr('x', (d) => d.y)\r\n          .attr('y', (d) => d.x)\r\n          .attr('dx', (d) => (d.children ? -6 : 6))\r\n          .attr('dy', 3)\r\n          .attr('text-anchor', (d) => (d.children ? 'end' : 'start'))\r\n          .attr('font-size', '12px')\r\n          .text((d) => d.data.name)\r\n          .call(wrapText, 100); // Wrap text after 100 pixels\r\n      \r\n        return svg.node();\r\n      };\r\n      \r\n      // Function to wrap text within the specified width\r\n      function wrapText(text, width) {\r\n        text.each(function () {\r\n          const textNode = d3.select(this);\r\n          const words = textNode.text().split(/\\s+/).reverse();\r\n          let word;\r\n          let line = [];\r\n          let lineNumber = 0;\r\n          const lineHeight = 1.1; // ems\r\n          const y = textNode.attr('y');\r\n          const dy = parseFloat(textNode.attr('dy') || 0);\r\n          let tspan = textNode.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');\r\n          while ((word = words.pop())) {\r\n            line.push(word);\r\n            tspan.text(line.join(' '));\r\n            if (tspan.node().getComputedTextLength() > width) {\r\n              line.pop();\r\n              tspan.text(line.join(' '));\r\n              line = [word];\r\n              tspan = textNode.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);\r\n            }\r\n          }\r\n        });\r\n      }\r\n        // const chart = () => {\r\n        //     const width = 800;\r\n        //     const height = 600;\r\n        //     const margin = { top: 20, right: 20, bottom: 30, left: 40 };\r\n      \r\n        //     const innerWidth = width - margin.left - margin.right;\r\n        //     const innerHeight = height - margin.top - margin.bottom;\r\n      \r\n        //     const svg = d3.create('svg').attr('width', width).attr('height', height);\r\n      \r\n        //     const g = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\r\n      \r\n        //     // Extract values from the data hierarchy\r\n        //     const flattenData = (root) => {\r\n        //       const nodes = [];\r\n        //       root.each((node) => nodes.push(node));\r\n        //       return nodes;\r\n        //     };\r\n      \r\n        //     const nodes = flattenData(d3.hierarchy(data));\r\n      \r\n        //     // Create scales to map data attributes to visual attributes\r\n        //     const xScale = d3.scaleLinear().domain([0, nodes.length]).range([0, innerWidth]);\r\n        //     const yScale = d3.scaleLinear().domain([0, d3.max(nodes, (d) => d.data.value)]).range([innerHeight, 0]);\r\n      \r\n        //     // Render the points (scatter plot)\r\n        //     g.selectAll('circle')\r\n        //       .data(nodes)\r\n        //       .enter()\r\n        //       .append('circle')\r\n        //       .attr('cx', (d, i) => xScale(i))\r\n        //       .attr('cy', (d) => yScale(d.data.value))\r\n        //       .attr('r', 4)\r\n        //       .attr('fill', 'steelblue');\r\n      \r\n        //     // Add axis to the chart\r\n        //     const xAxis = d3.axisBottom(xScale);\r\n        //     const yAxis = d3.axisLeft(yScale);\r\n      \r\n        //     g.append('g').attr('transform', `translate(0,${innerHeight})`).call(xAxis);\r\n        //     g.append('g').call(yAxis);\r\n      \r\n        //     return svg.node();\r\n        //   };\r\n\r\n    // Append the SVG container to the DOM\r\n    const svgNode = chart();\r\n    svgRef.current.appendChild(svgNode);\r\n  }, []);\r\n\r\n  return <div ref={svgRef}></div>;\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
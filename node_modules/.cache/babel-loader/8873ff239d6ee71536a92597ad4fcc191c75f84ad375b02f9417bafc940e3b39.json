{"ast":null,"code":"var _jsxFileName = \"C:\\\\vxxiv\\\\task-3\\\\src\\\\graphs\\\\collapsableTree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  data\n}) => {\n  _s();\n  // Ref for the SVG container\n  const svgRef = useRef();\n  useEffect(() => {\n    // const chart = () => {\n    //   // Define the dimensions and margins for the chart\n    //   const width = 928;\n    //   const height = 600;\n    //   const margin = {\n    //     top: 10,\n    //     right: 10,\n    //     bottom: 10,\n    //     left: 10,\n    //   };\n\n    //   // Calculate the actual width and height considering margins\n    //   const innerWidth = width - margin.left - margin.right;\n    //   const innerHeight = height - margin.top - margin.bottom;\n\n    //   // Create a hierarchical tree layout\n    //   const root = d3.hierarchy(data);\n    //   const treeLayout = d3.tree().size([innerHeight, innerWidth]);\n\n    //   // Perform the layout to calculate the node positions\n    //   treeLayout(root);\n\n    //   // Create a new SVG element\n    //   const svg = d3\n    //     .create('svg')\n    //     .attr('width', width)\n    //     .attr('height', height);\n\n    //   // Create a group element to apply margins\n    //   const g = svg\n    //     .append('g')\n    //     .attr('transform', `translate(${margin.left},${margin.top})`);\n\n    //   // Render the links (lines connecting nodes)\n    //   g.selectAll('path')\n    //     .data(root.links())\n    //     .enter()\n    //     .append('path')\n    //     .attr('d', (d) => {\n    //       return `M${d.source.y},${d.source.x}V${d.target.x}H${d.target.y}`;\n    //     })\n    //     .attr('fill', 'none')\n    //     .attr('stroke', 'black');\n\n    //   // Render the nodes (circles representing data elements)\n    //   g.selectAll('circle')\n    //     .data(root.descendants())\n    //     .enter()\n    //     .append('circle')\n    //     .attr('cx', (d) => d.y)\n    //     .attr('cy', (d) => d.x)\n    //     .attr('r', 4)\n    //     .attr('fill', 'steelblue');\n\n    //   // Render the node labels (text displaying node names)\n    //   g.selectAll('text')\n    //     .data(root.descendants())\n    //     .enter()\n    //     .append('text')\n    //     .attr('x', (d) => d.y)\n    //     .attr('y', (d) => d.x)\n    //     .attr('dx', (d) => (d.children ? -6 : 6))\n    //     .attr('dy', 3)\n    //     .attr('text-anchor', (d) => (d.children ? 'end' : 'start'))\n    //     .attr('font-size', '12px')\n    //     .text((d) => d.data.name);\n\n    //   return svg.node();\n    // };\n\n    const chart = () => {\n      const width = 800;\n      const height = 600;\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 40\n      };\n      const innerWidth = width - margin.left - margin.right;\n      const innerHeight = height - margin.top - margin.bottom;\n\n      // Create an SVG element\n      const svg = d3.create('svg').attr('width', width).attr('height', height);\n\n      // Create a group element to apply margins\n      const g = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Create scales to map data attributes to visual attributes\n      const xScale = d3.scaleLinear().domain([0, data.length]).range([0, innerWidth]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d.value)]).range([innerHeight, 0]);\n\n      // Render the points (scatter plot)\n      g.selectAll('circle').data(data).enter().append('circle').attr('cx', (d, i) => xScale(i)).attr('cy', d => yScale(d.value)).attr('r', 4).attr('fill', 'steelblue');\n\n      // Add axis to the chart\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n      g.append('g').attr('transform', `translate(0,${innerHeight})`).call(xAxis);\n      g.append('g').call(yAxis);\n      return svg.node();\n    };\n\n    // Append the SVG container to the DOM\n    const svgNode = chart();\n    svgRef.current.appendChild(svgNode);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 10\n  }, this);\n};\n_s(Graph, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Graph","data","_s","svgRef","chart","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","svg","create","attr","g","append","xScale","scaleLinear","domain","length","range","yScale","max","d","value","selectAll","enter","i","xAxis","axisBottom","yAxis","axisLeft","call","node","svgNode","current","appendChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/vxxiv/task-3/src/graphs/collapsableTree.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Graph = ({ data }) => {\r\n  // Ref for the SVG container\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n        // const chart = () => {\r\n        //   // Define the dimensions and margins for the chart\r\n        //   const width = 928;\r\n        //   const height = 600;\r\n        //   const margin = {\r\n        //     top: 10,\r\n        //     right: 10,\r\n        //     bottom: 10,\r\n        //     left: 10,\r\n        //   };\r\n    \r\n        //   // Calculate the actual width and height considering margins\r\n        //   const innerWidth = width - margin.left - margin.right;\r\n        //   const innerHeight = height - margin.top - margin.bottom;\r\n    \r\n        //   // Create a hierarchical tree layout\r\n        //   const root = d3.hierarchy(data);\r\n        //   const treeLayout = d3.tree().size([innerHeight, innerWidth]);\r\n    \r\n        //   // Perform the layout to calculate the node positions\r\n        //   treeLayout(root);\r\n    \r\n        //   // Create a new SVG element\r\n        //   const svg = d3\r\n        //     .create('svg')\r\n        //     .attr('width', width)\r\n        //     .attr('height', height);\r\n    \r\n        //   // Create a group element to apply margins\r\n        //   const g = svg\r\n        //     .append('g')\r\n        //     .attr('transform', `translate(${margin.left},${margin.top})`);\r\n    \r\n        //   // Render the links (lines connecting nodes)\r\n        //   g.selectAll('path')\r\n        //     .data(root.links())\r\n        //     .enter()\r\n        //     .append('path')\r\n        //     .attr('d', (d) => {\r\n        //       return `M${d.source.y},${d.source.x}V${d.target.x}H${d.target.y}`;\r\n        //     })\r\n        //     .attr('fill', 'none')\r\n        //     .attr('stroke', 'black');\r\n    \r\n        //   // Render the nodes (circles representing data elements)\r\n        //   g.selectAll('circle')\r\n        //     .data(root.descendants())\r\n        //     .enter()\r\n        //     .append('circle')\r\n        //     .attr('cx', (d) => d.y)\r\n        //     .attr('cy', (d) => d.x)\r\n        //     .attr('r', 4)\r\n        //     .attr('fill', 'steelblue');\r\n    \r\n        //   // Render the node labels (text displaying node names)\r\n        //   g.selectAll('text')\r\n        //     .data(root.descendants())\r\n        //     .enter()\r\n        //     .append('text')\r\n        //     .attr('x', (d) => d.y)\r\n        //     .attr('y', (d) => d.x)\r\n        //     .attr('dx', (d) => (d.children ? -6 : 6))\r\n        //     .attr('dy', 3)\r\n        //     .attr('text-anchor', (d) => (d.children ? 'end' : 'start'))\r\n        //     .attr('font-size', '12px')\r\n        //     .text((d) => d.data.name);\r\n    \r\n        //   return svg.node();\r\n        // };\r\n\r\n        const chart = () => {\r\n            const width = 800;\r\n            const height = 600;\r\n            const margin = { top: 20, right: 20, bottom: 30, left: 40 };\r\n      \r\n            const innerWidth = width - margin.left - margin.right;\r\n            const innerHeight = height - margin.top - margin.bottom;\r\n      \r\n            // Create an SVG element\r\n            const svg = d3\r\n              .create('svg')\r\n              .attr('width', width)\r\n              .attr('height', height);\r\n      \r\n            // Create a group element to apply margins\r\n            const g = svg\r\n              .append('g')\r\n              .attr('transform', `translate(${margin.left},${margin.top})`);\r\n      \r\n            // Create scales to map data attributes to visual attributes\r\n            const xScale = d3.scaleLinear().domain([0, data.length]).range([0, innerWidth]);\r\n            const yScale = d3.scaleLinear().domain([0, d3.max(data, (d) => d.value)]).range([innerHeight, 0]);\r\n      \r\n            // Render the points (scatter plot)\r\n            g.selectAll('circle')\r\n              .data(data)\r\n              .enter()\r\n              .append('circle')\r\n              .attr('cx', (d, i) => xScale(i))\r\n              .attr('cy', (d) => yScale(d.value))\r\n              .attr('r', 4)\r\n              .attr('fill', 'steelblue');\r\n      \r\n            // Add axis to the chart\r\n            const xAxis = d3.axisBottom(xScale);\r\n            const yAxis = d3.axisLeft(yScale);\r\n      \r\n            g.append('g').attr('transform', `translate(0,${innerHeight})`).call(xAxis);\r\n            g.append('g').call(yAxis);\r\n      \r\n            return svg.node();\r\n          };\r\n\r\n    // Append the SVG container to the DOM\r\n    const svgNode = chart();\r\n    svgRef.current.appendChild(svgNode);\r\n  }, []);\r\n\r\n  return <div ref={svgRef}></div>;\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
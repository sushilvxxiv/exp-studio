{"ast":null,"code":"var _jsxFileName = \"C:\\\\vxxiv\\\\task-3\\\\src\\\\graphs\\\\collapsableTree.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Graph = ({\n  data\n}) => {\n  _s();\n  // Ref for the SVG container\n  const svgRef = useRef();\n  useEffect(() => {\n    const chart = () => {\n      // Define the dimensions and margins for the chart\n      const width = 928;\n      const height = 600;\n      const margin = {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      };\n\n      // Calculate the actual width and height considering margins\n      const innerWidth = width - margin.left - margin.right;\n      const innerHeight = height - margin.top - margin.bottom;\n\n      // Create a hierarchical tree layout\n      const root = d3.hierarchy(data);\n      const treeLayout = d3.tree().size([innerHeight, innerWidth]);\n\n      // Perform the layout to calculate the node positions\n      treeLayout(root);\n\n      // Create a new SVG element\n      const svg = d3.create('svg').attr('width', width).attr('height', height);\n\n      // Create a group element to apply margins\n      const g = svg.append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Render the links (lines connecting nodes)\n      g.selectAll('path').data(root.links()).enter().append('path').attr('d', d => {\n        return `M${d.source.y},${d.source.x}V${d.target.x}H${d.target.y}`;\n      }).attr('fill', 'none').attr('stroke', 'black');\n\n      // Render the nodes (circles representing data elements)\n      g.selectAll('circle').data(root.descendants()).enter().append('circle').attr('cx', d => d.y).attr('cy', d => d.x).attr('r', 4).attr('fill', 'steelblue');\n\n      // Render the node labels (text displaying node names)\n      g.selectAll('text').data(root.descendants()).enter().append('text').attr('x', d => d.y).attr('y', d => d.x).attr('dx', d => d.children ? -6 : 6).attr('dy', 3).attr('text-anchor', d => d.children ? 'end' : 'start').attr('font-size', '12px').text(d => d.data.name);\n      return svg.node();\n    };\n\n    // Append the SVG container to the DOM\n    const svgNode = chart();\n    svgRef.current.appendChild(svgNode);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: svgRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n_s(Graph, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Graph","data","_s","svgRef","chart","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","root","hierarchy","treeLayout","tree","size","svg","create","attr","g","append","selectAll","links","enter","d","source","y","x","target","descendants","children","text","name","node","svgNode","current","appendChild","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/vxxiv/task-3/src/graphs/collapsableTree.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst Graph = ({ data }) => {\r\n  // Ref for the SVG container\r\n  const svgRef = useRef();\r\n\r\n  useEffect(() => {\r\n        const chart = () => {\r\n          // Define the dimensions and margins for the chart\r\n          const width = 928;\r\n          const height = 600;\r\n          const margin = {\r\n            top: 10,\r\n            right: 10,\r\n            bottom: 10,\r\n            left: 10,\r\n          };\r\n    \r\n          // Calculate the actual width and height considering margins\r\n          const innerWidth = width - margin.left - margin.right;\r\n          const innerHeight = height - margin.top - margin.bottom;\r\n    \r\n          // Create a hierarchical tree layout\r\n          const root = d3.hierarchy(data);\r\n          const treeLayout = d3.tree().size([innerHeight, innerWidth]);\r\n    \r\n          // Perform the layout to calculate the node positions\r\n          treeLayout(root);\r\n    \r\n          // Create a new SVG element\r\n          const svg = d3\r\n            .create('svg')\r\n            .attr('width', width)\r\n            .attr('height', height);\r\n    \r\n          // Create a group element to apply margins\r\n          const g = svg\r\n            .append('g')\r\n            .attr('transform', `translate(${margin.left},${margin.top})`);\r\n    \r\n          // Render the links (lines connecting nodes)\r\n          g.selectAll('path')\r\n            .data(root.links())\r\n            .enter()\r\n            .append('path')\r\n            .attr('d', (d) => {\r\n              return `M${d.source.y},${d.source.x}V${d.target.x}H${d.target.y}`;\r\n            })\r\n            .attr('fill', 'none')\r\n            .attr('stroke', 'black');\r\n    \r\n          // Render the nodes (circles representing data elements)\r\n          g.selectAll('circle')\r\n            .data(root.descendants())\r\n            .enter()\r\n            .append('circle')\r\n            .attr('cx', (d) => d.y)\r\n            .attr('cy', (d) => d.x)\r\n            .attr('r', 4)\r\n            .attr('fill', 'steelblue');\r\n    \r\n          // Render the node labels (text displaying node names)\r\n          g.selectAll('text')\r\n            .data(root.descendants())\r\n            .enter()\r\n            .append('text')\r\n            .attr('x', (d) => d.y)\r\n            .attr('y', (d) => d.x)\r\n            .attr('dx', (d) => (d.children ? -6 : 6))\r\n            .attr('dy', 3)\r\n            .attr('text-anchor', (d) => (d.children ? 'end' : 'start'))\r\n            .attr('font-size', '12px')\r\n            .text((d) => d.data.name);\r\n    \r\n          return svg.node();\r\n        };\r\n\r\n    // Append the SVG container to the DOM\r\n    const svgNode = chart();\r\n    svgRef.current.appendChild(svgNode);\r\n  }, []);\r\n\r\n  return <div ref={svgRef}></div>;\r\n};\r\n\r\nexport default Graph;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}